{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 1. Write a query to display the columns in a specific order, such as order date,\par
salesman ID, order number, and purchase amount for all orders.\par
ord_no purch_amt ord_date customer_id salesman_id\par
---------- ---------- ---------- ----------- ----------- ----------- ----------- ----\par
70001 150.5 2012-10-05 3005 5002\par
70009 270.65 2012-09-10 3001 5005\par
70002 65.26 2012-10-05 3002 5001\par
70004 110.5 2012-08-17 3009 5003\par
70007 948.5 2012-09-10 3005 5002\par
70005 2400.6 2012-07-27 3007 5001\par
70008 5760 2012-09-10 3002 5001\par
70010 1983.43 2012-10-10 3004 5006\par
70003 2480.4 2012-10-10 3009 5003\par
70012 250.45 2012-06-27 3008 5002\par
70011 75.29 2012-08-17 3003 5007\par
70013 3045.6 2012-04-25 3002 5001\par
\par
\b Solution:\b0\par
select * from orders order by ord_no, purchase_amount, order_date, customer_id, salesman_id\par
\par
2. From the following table, write a SQL query to locate salespeople who live in the city\par
of 'Paris'. Return salesperson's name, city.\par
salesman_id | name | city | commission\par
-------------+------------+----------+------------\par
5001 | James Hoog | New York | 0.15\par
5002 | Nail Knite | Paris | 0.13\par
5005 | Pit Alex | London | 0.11\par
5006 | Mc Lyon | Paris | 0.14\par
5007 | Paul Adam | Rome | 0.13\par
5003 | Lauson Hen | San Jose | 0.12\par
\b Solution:\b0\par
select name,city from salesman where city='Paris';\par
\par
3. From the following table, write a SQL query to select a range of products whose\par
price is in the range Rs.200 to Rs.600. Begin and end values are included. Return\par
pro_id, pro_name, pro_price, and pro_com.\par
PRO_ID PRO_NAME PRO_PRICE PRO_COM\par
------- ------------------------- ------------------- --------------\par
101 Motherboard 3200.00 15\par
102 Keyboard 450.00 16\par
103 ZIP drive 250.00 14\par
104 Speaker 550.00 16\par
105 Monitor 5000.00 11\par
106 DVD drive 900.00 12\par
107 CD drive 800.00 12\par
108 Printer 2600.00 13\par
109 Refill cartridge 350.00 13\par
110 Mouse 250.00 12\par
\par
\b Solution:\b0\par
select * from products where pro_price between 200.00 and 600.00\par
\par
4. From the following table, write a SQL query to find the items whose prices are\par
higher than or equal to $550. Order the result by product price in descending, then\par
product name in ascending.\par
Return pro_name and pro_price.\par
PRO_ID PRO_NAME PRO_PRICE PRO_COM\par
------- ------------------------- -------------- ----------\par
101 Motherboard 3200.00 15\par
102 Keyboard 450.00 16\par
103 ZIP drive 250.00 14\par
104 Speaker 550.00 16\par
105 Monitor 5000.00 11\par
106 DVD drive 900.00 12\par
107 CD drive 800.00 12\par
108 Printer 2600.00 13\par
109 Refill cartridge 350.00 13\par
110 Mouse 250.00 12\par
\par
\b Solution:\b0\par
select pro_name,pro_price from products where pro_price>=500.00 order by pro_price desc,pro_name;\par
\par
\par
5. From the following table, write a SQL query to find details of all orders excluding\par
those with ord_date equal to '2012-09-10' and salesman_id higher than 5005 or\par
purch_amt greater than 1000.Return ord_no, purch_amt, ord_date, customer_id and\par
salesman_id.\par
ord_no purch_amt ord_date customer_id salesman_id\par
---------- ---------- ---------- ----------- ----------- \f1\emdash --------------\par
70001 150.5 2012-10-05 3005 5002\par
70009 270.65 2012-09-10 3001 5005\par
70002 65.26 2012-10-05 3002 5001\par
70004 110.5 2012-08-17 3009 5003\par
70007 948.5 2012-09-10 3005 5002\par
70005 2400.6 2012-07-27 3007 5001\par
70008 5760 2012-09-10 3002 5001\par
70010 1983.43 2012-10-10 3004 5006\par
70003 2480.4 2012-10-10 3009 5003\par
70012 250.45 2012-06-27 3008 5002\par
70011 75.29 2012-08-17 3003 5007\par
70013 3045.6 2012-04-25 3002 5001\par
\par
\f0\lang1033 Solution:\par
\par
select * from orders where order_date<>'2012-09-10' and salesman_id>5005 and purchase_amount>1000;\par
\par
\par
6. Create the table world with your schema and find the below queries !\par
name continent area population gdp\par
Afghanistan Asia 652230 25500100 20343000000\par
Albania Europe 28748 2831741 12960000000\par
Algeria Africa 2381741 37100000 188681000000\par
Andorra Europe 468 78115 3712000000\par
Angola Africa 1246700 20609294 100990000000\par
Dominican Republic Caribbean 48671 9445281 58898000000\par
China Asia 9596961 1365370000 8358400000000\par
Colombia South America 1141748 47662000 369813000000\par
Comoros Africa 1862 743798 616000000\par
Denmark Europe 43094 5634437 314889000000\par
Djibouti Africa 23200 886000 1361000000\par
Dominica Caribbean 751 71293 499000000\par
1. Write a query to fetch which country has the highest population?\par
Solution:select country from world order by population desc limit 1;\par
2.write a query to fetch the name of the country which has the least gdp?\par
Solution:select country from world order by gdp limit 1;\par
3. Write a query to fetch the name of the country which ends with letter C?\par
Solution:select country from world where country like '%c'\par
4.write a query to fetch the name of the country which starts with letter D?\par
Solution:select country from world where country like 'd%'\par
5.write query to fetch which continent has highest gdp?\par
Solution:select continent from world order by gdp desc limit 1;\par
6.Give the total GDP of Africa?\par
Solution:select sum(gdp) as Total_GDP from world where continent='Africa';\par
7.write a query to fetch the total population for each continent?\par
Solution:select continent,sum(population) from world group by continent;\par
8. For each relevant continent show the number of countries that has a population of at least\par
200000000?\par
Solution:select continent,count(country) from world where population>=200000000 group by continent\par
\par
7. Problem statement: Suppose we have two table students and course\par
create table students(student_id int,\par
student_name varchar(60) not null,\par
city varchar(60) not null,\par
primary key(student_id));\par
create table course(student_id int,\par
course_name varchar(60) not null,\par
Marks int not null,\par
primary key(student_id),\par
foreign key(student_id) references students(student_id));\par
insert into students values(200,'John Doe','Delhi'),\par
(210,'John Doe','Delhi'),\par
(220,'Moon ethan','Rajasthan'),\par
(230,'Jessie','Bangalore'),\par
(240,'Benbrook','Bihar'),\par
(250,'Ethan','Bihar'),\par
(260,'Johnnie','Bangalore'),\par
(270,'Goh','Delhi'),(380,'John Doe','Delhi'),\par
(280,'Pavi','Delhi'),\par
(290,'Sanvi','Rajasthan'),\par
(300,'Navyaa','Bangalore'),\par
(310,'Ankul','Bihar'),\par
(311,'Hitanshi','Bihar'),\par
(312,'Aayush','Bangalore'),\par
(313,'Rian','Delhi');\par
insert into course values(200,'Datascience',75),\par
(210,'Datascience',75),\par
(220,'Dataanalyst',80),\par
(230,'Dataanalyst',80),\par
(240,'Dataanalyst',84),\par
(250,'Dataanalyst',50),\par
(260,'Datascience',80),\par
(270,'Datascience',99),\par
(380,'Datascience',45),\par
(280,'Datascience',78),\par
(290,'Dataanalyst',78),\par
(300,'Computer vision',90),\par
(310,'Computer vision',90),\par
(311,'Computer vision',75),\par
(312,'Computer vision',39)\par
Questions :\par
q1. write a query to fetch the names of the students having maximum marks in each\par
course?\par
Solution:\par
select s.*,c.*\par
from\par
students s \par
inner join \par
(select *,\par
\tab    dense_rank() over(partition by course_name order by Marks desc) as marks_rank\par
from course) c on\par
s.student_id=c.student_id and c.marks_rank=1\par
;\par
q2. write a query to fetch the names of the students having 3th highest marks from each\par
course?\par
Solution:\par
select s.*,c.*\par
from\par
students s \par
inner join \par
(select *,\par
\tab    dense_rank() over(partition by course_name order by Marks desc) as marks_rank\par
from course) c on\par
s.student_id=c.student_id and c.marks_rank=3\par
;\par
q3. write a query to fetch the names of the students having minimum marks in each course?\par
Solution:\par
select s.*,c.*\par
from\par
students s \par
inner join \par
(select *,\par
\tab    dense_rank() over(partition by course_name order by Marks) as min_marks\par
from course) c on\par
s.student_id=c.student_id and c.min_marks=1\par
q4. write a query to fetch the names of the students having 4th least marks from each\par
course?\par
Solution:\par
select s.*,c.*\par
from\par
students s \par
inner join \par
(select *,\par
\tab    dense_rank() over(partition by course_name order by Marks) as min_marks\par
from course) c on\par
s.student_id=c.student_id and c.min_marks>=4\par
q5. write a query to fetch the city name of the students who have 2nd highest marks?\par
Solution:\par
select s.*,c.*\par
from\par
students s \par
inner join \par
(select *,\par
\tab    dense_rank() over(partition by course_name order by Marks) as min_marks\par
from course) c on\par
s.student_id=c.student_id and c.min_marks=2;\par
q6. write a query to fetch the count of each city?\par
Soltuion:\par
select city,count(*) from students group by city ;\par
q7. write a query to fetch the names of the students who are from the same city?\par
Solution:\par
select city, group_concat(distinct student_name) as students_from_respective_city from students group by city;\par
q8.write a query to fetch the names of students starting with 'A'?\par
Solution:\par
select student_name from students where student_name like 'A%';\par
q9.write a query to fetch the count of students' names having the same marks in each\par
course?\par
Solution:\par
select s.student_id,c.course_name,c.marks,count(*)\par
from\par
students s \par
inner join \par
(select *,\par
\tab    dense_rank() over(partition by course_name order by Marks desc) as min_marks\par
from course) c on\par
s.student_id=c.student_id \par
group by c.course_name,c.marks\par
having count(c.marks)>1;\par
q10.write a query to fetch the count of students from each city?\par
Solution:\par
select distinct city,count(distinct student_name) from students group by city;\par
\par
8. Create a table below.\par
+--------------+---------+\par
| Column Name | Type |\par
+--------------+---------+\par
| player_id | int |\par
| device_id | int |\par
| event_date | date |\par
| games_played | int |\par
+--------------+---------+\par
(player_id, event_date) is the primary key of this table.\par
This table shows the activity of players of some games.\par
Each row is a record of a player who logged in and played a number of games (possibly 0)\par
before logging out on someday using some device.\par
Write an SQL query to report the first login date for each player.\par
Return the result table in any order.\par
The query result format is in the following example.\par
Input:\par
Activity table:\par
+-----------+-----------+------------+--------------+\par
| player_id | device_id | event_date | games_played |\par
+-----------+-----------+------------+--------------+\par
| 1 | 2 | 2016-03-01 | 5 |\par
| 1 | 2 | 2016-05-02 | 6 |\par
| 2 | 3 | 2017-06-25 | 1 |\par
| 3 | 1 | 2016-03-02 | 0 |\par
| 3 | 4 | 2018-07-03 | 5 |\par
+-----------+-----------+------------+--------------+\par
Output:\par
+-----------+-------------+\par
| player_id | first_login |\par
+-----------+-------------+\par
| 1 | 2016-03-01 |\par
| 2 | 2017-06-25 |\par
| 3 | 2016-03-02 |\par
\par
Solution:\par
select player_id,min(event_date) as first_login from player group by player_id;\par
\par
\par
9. Create a table below.\par
+-------------+---------+\par
| Column Name | Type |\par
+-------------+---------+\par
| product_id | int |\par
| low_fats | enum |\par
| recyclable | enum |\par
+-------------+---------+\par
product_id is the primary key for this table.\par
low_fats is an ENUM of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it\par
is not.\par
recyclable is an ENUM of types ('Y', 'N') where 'Y' means this product is recyclable and 'N'\par
means it is not.\par
Write an SQL query to find the ids of products that are both low fat and recyclable.\par
Return the result table in any order.\par
The query result format is in the following example.\par
Input:\par
Products table:\par
+-------------+----------+------------+\par
| product_id | low_fats | recyclable |\par
+-------------+----------+------------+\par
| 0 | Y | N |\par
| 1 | Y | Y |\par
| 2 | N | Y |\par
| 3 | Y | Y |\par
| 4 | N | N |\par
+-------------+----------+------------+\par
Output:\par
+-------------+\par
| product_id |\par
+-------------+\par
| 1 |\par
| 3 |\par
+-------------+\par
Solution:\par
select product_id from food_products\par
where low_fats='Y' and recyclable='Y';\par
\par
10. Create a table below.\par
name region area population gdp\par
Afghanista\par
n\par
South Asia 652225 26000000\par
Albania Europe 28728 3200000 6656000000\par
Algeria Middle\par
East\par
240000\par
0\par
32900000 7501200000\par
0\par
Andorra Europe 468 64000\par
...\par
1. Select the statement that shows the sum of population of all countries i\par
Solution:\par
select country_name,sum(population) from countries group by country_name order by country_name;\par
2. Select the statement that shows the number of countries with population smaller\par
than 150000\par
Solution:\par
select count(c.country_counts) from\par
(select count(country_name) country_counts from countries where population>150000 group by country_name) c\par
3. Select the list of core SQL aggregate functions\par
Solution:\par
#List of aggregate functions in SQL\par
count()\par
sum()\par
min()\par
max()\par
avg()\par
4. Select the result that would be obtained from the following code:\par
#NOT GIVEN\par
5. Select the statement that shows the average population of 'Poland', 'Germany' and\par
'Denmark'\par
#NOT GIVEN\par
6. Select the statement that shows the medium population density of each region\par
select region,avg(population) from countries group by region\par
7. Select the statement that shows the name and population density of the country\par
with the largest population\par
Solution:\par
select c.country_name,c.region,c.population from\par
(select *,rank() over(partition by region order by population desc) as population_index\par
from countries) c\par
where c.population_index=1;\lang9\par
}
 